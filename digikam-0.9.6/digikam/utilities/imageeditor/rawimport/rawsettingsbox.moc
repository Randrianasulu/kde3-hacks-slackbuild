/****************************************************************************
** Digikam::RawSettingsBox meta object code from reading C++ file 'rawsettingsbox.h'
**
** Created: Tue Jun 13 22:44:34 2017
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.8   edited Feb 2 14:59 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "rawsettingsbox.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.8d. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *Digikam::RawSettingsBox::className() const
{
    return "Digikam::RawSettingsBox";
}

QMetaObject *Digikam::RawSettingsBox::metaObj = 0;
static QMetaObjectCleanUp cleanUp_Digikam__RawSettingsBox( "Digikam::RawSettingsBox", &Digikam::RawSettingsBox::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString Digikam::RawSettingsBox::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Digikam::RawSettingsBox", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString Digikam::RawSettingsBox::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Digikam::RawSettingsBox", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* Digikam::RawSettingsBox::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = EditorToolSettings::staticMetaObject();
    static const QUParameter param_slot_0[] = {
	{ "channel", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_0 = {"slotChannelChanged", 1, param_slot_0 };
    static const QUParameter param_slot_1[] = {
	{ "scale", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_1 = {"slotScaleChanged", 1, param_slot_1 };
    static const QUParameter param_slot_2[] = {
	{ "color", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_2 = {"slotColorsChanged", 1, param_slot_2 };
    static const QUMethod slot_3 = {"slotResetCurve", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "slotChannelChanged(int)", &slot_0, QMetaData::Private },
	{ "slotScaleChanged(int)", &slot_1, QMetaData::Private },
	{ "slotColorsChanged(int)", &slot_2, QMetaData::Private },
	{ "slotResetCurve()", &slot_3, QMetaData::Private }
    };
    static const QUMethod signal_0 = {"signalUpdatePreview", 0, 0 };
    static const QUMethod signal_1 = {"signalAbortPreview", 0, 0 };
    static const QUMethod signal_2 = {"signalDemosaicingChanged", 0, 0 };
    static const QUMethod signal_3 = {"signalPostProcessingChanged", 0, 0 };
    static const QMetaData signal_tbl[] = {
	{ "signalUpdatePreview()", &signal_0, QMetaData::Public },
	{ "signalAbortPreview()", &signal_1, QMetaData::Public },
	{ "signalDemosaicingChanged()", &signal_2, QMetaData::Public },
	{ "signalPostProcessingChanged()", &signal_3, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"Digikam::RawSettingsBox", parentObject,
	slot_tbl, 4,
	signal_tbl, 4,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_Digikam__RawSettingsBox.setMetaObject( metaObj );
    return metaObj;
}

void* Digikam::RawSettingsBox::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "Digikam::RawSettingsBox" ) )
	return this;
    return EditorToolSettings::qt_cast( clname );
}

// SIGNAL signalUpdatePreview
void Digikam::RawSettingsBox::signalUpdatePreview()
{
    activate_signal( staticMetaObject()->signalOffset() + 0 );
}

// SIGNAL signalAbortPreview
void Digikam::RawSettingsBox::signalAbortPreview()
{
    activate_signal( staticMetaObject()->signalOffset() + 1 );
}

// SIGNAL signalDemosaicingChanged
void Digikam::RawSettingsBox::signalDemosaicingChanged()
{
    activate_signal( staticMetaObject()->signalOffset() + 2 );
}

// SIGNAL signalPostProcessingChanged
void Digikam::RawSettingsBox::signalPostProcessingChanged()
{
    activate_signal( staticMetaObject()->signalOffset() + 3 );
}

bool Digikam::RawSettingsBox::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: slotChannelChanged((int)static_QUType_int.get(_o+1)); break;
    case 1: slotScaleChanged((int)static_QUType_int.get(_o+1)); break;
    case 2: slotColorsChanged((int)static_QUType_int.get(_o+1)); break;
    case 3: slotResetCurve(); break;
    default:
	return EditorToolSettings::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool Digikam::RawSettingsBox::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: signalUpdatePreview(); break;
    case 1: signalAbortPreview(); break;
    case 2: signalDemosaicingChanged(); break;
    case 3: signalPostProcessingChanged(); break;
    default:
	return EditorToolSettings::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool Digikam::RawSettingsBox::qt_property( int id, int f, QVariant* v)
{
    return EditorToolSettings::qt_property( id, f, v);
}

bool Digikam::RawSettingsBox::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
