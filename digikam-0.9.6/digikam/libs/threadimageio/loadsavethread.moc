/****************************************************************************
** Digikam::LoadSaveThread meta object code from reading C++ file 'loadsavethread.h'
**
** Created: Tue Jun 13 22:20:36 2017
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.8   edited Feb 2 14:59 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "loadsavethread.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.8d. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *Digikam::LoadSaveThread::className() const
{
    return "Digikam::LoadSaveThread";
}

QMetaObject *Digikam::LoadSaveThread::metaObj = 0;
static QMetaObjectCleanUp cleanUp_Digikam__LoadSaveThread( "Digikam::LoadSaveThread", &Digikam::LoadSaveThread::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString Digikam::LoadSaveThread::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Digikam::LoadSaveThread", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString Digikam::LoadSaveThread::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Digikam::LoadSaveThread", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* Digikam::LoadSaveThread::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QObject::staticMetaObject();
    static const QUParameter param_signal_0[] = {
	{ "loadingDescription", &static_QUType_ptr, "LoadingDescription", QUParameter::In }
    };
    static const QUMethod signal_0 = {"signalImageStartedLoading", 1, param_signal_0 };
    static const QUParameter param_signal_1[] = {
	{ "loadingDescription", &static_QUType_ptr, "LoadingDescription", QUParameter::In },
	{ "progress", &static_QUType_ptr, "float", QUParameter::In }
    };
    static const QUMethod signal_1 = {"signalLoadingProgress", 2, param_signal_1 };
    static const QUParameter param_signal_2[] = {
	{ "loadingDescription", &static_QUType_ptr, "LoadingDescription", QUParameter::In },
	{ "img", &static_QUType_ptr, "DImg", QUParameter::In }
    };
    static const QUMethod signal_2 = {"signalImageLoaded", 2, param_signal_2 };
    static const QUParameter param_signal_3[] = {
	{ "oldLoadingDescription", &static_QUType_ptr, "LoadingDescription", QUParameter::In },
	{ "newLoadingDescription", &static_QUType_ptr, "LoadingDescription", QUParameter::In }
    };
    static const QUMethod signal_3 = {"signalMoreCompleteLoadingAvailable", 2, param_signal_3 };
    static const QUParameter param_signal_4[] = {
	{ "filePath", &static_QUType_QString, 0, QUParameter::In }
    };
    static const QUMethod signal_4 = {"signalImageStartedSaving", 1, param_signal_4 };
    static const QUParameter param_signal_5[] = {
	{ "filePath", &static_QUType_QString, 0, QUParameter::In },
	{ "progress", &static_QUType_ptr, "float", QUParameter::In }
    };
    static const QUMethod signal_5 = {"signalSavingProgress", 2, param_signal_5 };
    static const QUParameter param_signal_6[] = {
	{ "filePath", &static_QUType_QString, 0, QUParameter::In },
	{ "success", &static_QUType_bool, 0, QUParameter::In }
    };
    static const QUMethod signal_6 = {"signalImageSaved", 2, param_signal_6 };
    static const QMetaData signal_tbl[] = {
	{ "signalImageStartedLoading(const LoadingDescription&)", &signal_0, QMetaData::Public },
	{ "signalLoadingProgress(const LoadingDescription&,float)", &signal_1, QMetaData::Public },
	{ "signalImageLoaded(const LoadingDescription&,const DImg&)", &signal_2, QMetaData::Public },
	{ "signalMoreCompleteLoadingAvailable(const LoadingDescription&,const LoadingDescription&)", &signal_3, QMetaData::Public },
	{ "signalImageStartedSaving(const QString&)", &signal_4, QMetaData::Public },
	{ "signalSavingProgress(const QString&,float)", &signal_5, QMetaData::Public },
	{ "signalImageSaved(const QString&,bool)", &signal_6, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"Digikam::LoadSaveThread", parentObject,
	0, 0,
	signal_tbl, 7,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_Digikam__LoadSaveThread.setMetaObject( metaObj );
    return metaObj;
}

void* Digikam::LoadSaveThread::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "Digikam::LoadSaveThread" ) )
	return this;
    if ( !qstrcmp( clname, "QThread" ) )
	return (QThread*)this;
    return QObject::qt_cast( clname );
}

#include <qobjectdefs.h>
#include <qsignalslotimp.h>

// SIGNAL signalImageStartedLoading
void Digikam::LoadSaveThread::signalImageStartedLoading( const LoadingDescription& t0 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 0 );
    if ( !clist )
	return;
    QUObject o[2];
    static_QUType_ptr.set(o+1,&t0);
    activate_signal( clist, o );
}

// SIGNAL signalLoadingProgress
void Digikam::LoadSaveThread::signalLoadingProgress( const LoadingDescription& t0, float t1 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 1 );
    if ( !clist )
	return;
    QUObject o[3];
    static_QUType_ptr.set(o+1,&t0);
    static_QUType_ptr.set(o+2,&t1);
    activate_signal( clist, o );
}

// SIGNAL signalImageLoaded
void Digikam::LoadSaveThread::signalImageLoaded( const LoadingDescription& t0, const DImg& t1 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 2 );
    if ( !clist )
	return;
    QUObject o[3];
    static_QUType_ptr.set(o+1,&t0);
    static_QUType_ptr.set(o+2,&t1);
    activate_signal( clist, o );
}

// SIGNAL signalMoreCompleteLoadingAvailable
void Digikam::LoadSaveThread::signalMoreCompleteLoadingAvailable( const LoadingDescription& t0, const LoadingDescription& t1 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 3 );
    if ( !clist )
	return;
    QUObject o[3];
    static_QUType_ptr.set(o+1,&t0);
    static_QUType_ptr.set(o+2,&t1);
    activate_signal( clist, o );
}

// SIGNAL signalImageStartedSaving
void Digikam::LoadSaveThread::signalImageStartedSaving( const QString& t0 )
{
    activate_signal( staticMetaObject()->signalOffset() + 4, t0 );
}

// SIGNAL signalSavingProgress
void Digikam::LoadSaveThread::signalSavingProgress( const QString& t0, float t1 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 5 );
    if ( !clist )
	return;
    QUObject o[3];
    static_QUType_QString.set(o+1,t0);
    static_QUType_ptr.set(o+2,&t1);
    activate_signal( clist, o );
}

// SIGNAL signalImageSaved
void Digikam::LoadSaveThread::signalImageSaved( const QString& t0, bool t1 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 6 );
    if ( !clist )
	return;
    QUObject o[3];
    static_QUType_QString.set(o+1,t0);
    static_QUType_bool.set(o+2,t1);
    activate_signal( clist, o );
}

bool Digikam::LoadSaveThread::qt_invoke( int _id, QUObject* _o )
{
    return QObject::qt_invoke(_id,_o);
}

bool Digikam::LoadSaveThread::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: signalImageStartedLoading((const LoadingDescription&)*((const LoadingDescription*)static_QUType_ptr.get(_o+1))); break;
    case 1: signalLoadingProgress((const LoadingDescription&)*((const LoadingDescription*)static_QUType_ptr.get(_o+1)),(float)(*((float*)static_QUType_ptr.get(_o+2)))); break;
    case 2: signalImageLoaded((const LoadingDescription&)*((const LoadingDescription*)static_QUType_ptr.get(_o+1)),(const DImg&)*((const DImg*)static_QUType_ptr.get(_o+2))); break;
    case 3: signalMoreCompleteLoadingAvailable((const LoadingDescription&)*((const LoadingDescription*)static_QUType_ptr.get(_o+1)),(const LoadingDescription&)*((const LoadingDescription*)static_QUType_ptr.get(_o+2))); break;
    case 4: signalImageStartedSaving((const QString&)static_QUType_QString.get(_o+1)); break;
    case 5: signalSavingProgress((const QString&)static_QUType_QString.get(_o+1),(float)(*((float*)static_QUType_ptr.get(_o+2)))); break;
    case 6: signalImageSaved((const QString&)static_QUType_QString.get(_o+1),(bool)static_QUType_bool.get(_o+2)); break;
    default:
	return QObject::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool Digikam::LoadSaveThread::qt_property( int id, int f, QVariant* v)
{
    return QObject::qt_property( id, f, v);
}

bool Digikam::LoadSaveThread::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
