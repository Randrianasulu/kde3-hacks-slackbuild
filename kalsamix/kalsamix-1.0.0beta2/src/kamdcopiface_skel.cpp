/****************************************************************************
**
** DCOP Skeleton generated by dcopidl2cpp from kamdcopiface.kidl
**
** WARNING! All changes made in this file will be lost!
**
*****************************************************************************/

#include "./kamdcopiface.h"

#include <kdatastream.h>


static const char* const KAMDCOPIface_ftable[6][3] = {
    { "void", "masterVolUp(int)", "masterVolUp(int)" },
    { "void", "masterVolDown(int)", "masterVolDown(int)" },
    { "void", "masterMute()", "masterMute()" },
    { "void", "masterShow()", "masterShow()" },
    { "void", "quitKAlsaMix()", "quitKAlsaMix()" },
    { 0, 0, 0 }
};
static const int KAMDCOPIface_ftable_hiddens[5] = {
    0,
    0,
    0,
    0,
    0,
};

bool KAMDCOPIface::process(const QCString &fun, const QByteArray &data, QCString& replyType, QByteArray &replyData)
{
    if ( fun == KAMDCOPIface_ftable[0][1] ) { // void masterVolUp(int)
	int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = KAMDCOPIface_ftable[0][0]; 
	masterVolUp(arg0 );
    } else if ( fun == KAMDCOPIface_ftable[1][1] ) { // void masterVolDown(int)
	int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = KAMDCOPIface_ftable[1][0]; 
	masterVolDown(arg0 );
    } else if ( fun == KAMDCOPIface_ftable[2][1] ) { // void masterMute()
	replyType = KAMDCOPIface_ftable[2][0]; 
	masterMute( );
    } else if ( fun == KAMDCOPIface_ftable[3][1] ) { // void masterShow()
	replyType = KAMDCOPIface_ftable[3][0]; 
	masterShow( );
    } else if ( fun == KAMDCOPIface_ftable[4][1] ) { // void quitKAlsaMix()
	replyType = KAMDCOPIface_ftable[4][0]; 
	quitKAlsaMix( );
    } else {
	return DCOPObject::process( fun, data, replyType, replyData );
    }
    return true;
}

QCStringList KAMDCOPIface::interfaces()
{
    QCStringList ifaces = DCOPObject::interfaces();
    ifaces += "KAMDCOPIface";
    return ifaces;
}

QCStringList KAMDCOPIface::functions()
{
    QCStringList funcs = DCOPObject::functions();
    for ( int i = 0; KAMDCOPIface_ftable[i][2]; i++ ) {
	if (KAMDCOPIface_ftable_hiddens[i])
	    continue;
	QCString func = KAMDCOPIface_ftable[i][0];
	func += ' ';
	func += KAMDCOPIface_ftable[i][2];
	funcs << func;
    }
    return funcs;
}


