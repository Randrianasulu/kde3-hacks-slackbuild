# Makefile.in generated by automake 1.10.1 from Makefile.am.
# KDE tags expanded automatically by am_edit - $Revision: 483858 $ 
# superkaramba/src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.






pkgdatadir = $(datadir)/kdeutils
pkglibdir = $(libdir)/kdeutils
pkgincludedir = $(includedir)/kdeutils
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
bin_PROGRAMS = superkaramba$(EXEEXT)
subdir = superkaramba/src
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(shelldesktopdir)" \
	"$(DESTDIR)$(shellrcdir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_superkaramba_OBJECTS = main.$(OBJEXT) karamba.$(OBJEXT) \
	meter.$(OBJEXT) bar.$(OBJEXT) sensor.$(OBJEXT) \
	datesensor.$(OBJEXT) textlabel.$(OBJEXT) memsensor.$(OBJEXT) \
	uptimesensor.$(OBJEXT) cpusensor.$(OBJEXT) \
	networksensor.$(OBJEXT) imagelabel.$(OBJEXT) graph.$(OBJEXT) \
	xmmssensor.$(OBJEXT) programsensor.$(OBJEXT) \
	disksensor.$(OBJEXT) sensorparams.$(OBJEXT) \
	sensorsensor.$(OBJEXT) textfilesensor.$(OBJEXT) \
	clickarea.$(OBJEXT) noatunsensor.$(OBJEXT) \
	karambarootpixmap.$(OBJEXT) clickmap.$(OBJEXT) \
	rsssensor.$(OBJEXT) textfield.$(OBJEXT) taskmanager.$(OBJEXT) \
	showdesktop.$(OBJEXT) richtextlabel.$(OBJEXT) \
	karambasessionmanaged.$(OBJEXT) systemtray.$(OBJEXT) \
	bar_python.$(OBJEXT) meter_python.$(OBJEXT) \
	textlabel_python.$(OBJEXT) richtextlabel_python.$(OBJEXT) \
	imagelabel_python.$(OBJEXT) config_python.$(OBJEXT) \
	misc_python.$(OBJEXT) systray_python.$(OBJEXT) \
	task_python.$(OBJEXT) widget_python.$(OBJEXT) \
	menu_python.$(OBJEXT) karambalistboxitem.$(OBJEXT) \
	graph_python.$(OBJEXT) karambainterface.$(OBJEXT) \
	karambaapp.$(OBJEXT) karamba_python.$(OBJEXT) \
	lineparser.$(OBJEXT) themefile.$(OBJEXT) themesdlg.$(OBJEXT) \
	themewidget.$(OBJEXT) kwidgetlistbox.$(OBJEXT) \
	sknewstuff.$(OBJEXT) themelocale.$(OBJEXT) input.$(OBJEXT) \
	sklineedit.$(OBJEXT) input_python.$(OBJEXT) \
	svcgrp_python.$(OBJEXT)
#>- superkaramba_OBJECTS = $(am_superkaramba_OBJECTS)
#>+ 26
superkaramba_OBJECTS = main.$(OBJEXT) karamba.$(OBJEXT) \
	meter.$(OBJEXT) bar.$(OBJEXT) sensor.$(OBJEXT) \
	datesensor.$(OBJEXT) textlabel.$(OBJEXT) memsensor.$(OBJEXT) \
	uptimesensor.$(OBJEXT) cpusensor.$(OBJEXT) \
	networksensor.$(OBJEXT) imagelabel.$(OBJEXT) graph.$(OBJEXT) \
	xmmssensor.$(OBJEXT) programsensor.$(OBJEXT) \
	disksensor.$(OBJEXT) sensorparams.$(OBJEXT) \
	sensorsensor.$(OBJEXT) textfilesensor.$(OBJEXT) \
	clickarea.$(OBJEXT) noatunsensor.$(OBJEXT) \
	karambarootpixmap.$(OBJEXT) clickmap.$(OBJEXT) \
	rsssensor.$(OBJEXT) textfield.$(OBJEXT) taskmanager.$(OBJEXT) \
	showdesktop.$(OBJEXT) richtextlabel.$(OBJEXT) \
	karambasessionmanaged.$(OBJEXT) systemtray.$(OBJEXT) \
	bar_python.$(OBJEXT) meter_python.$(OBJEXT) \
	textlabel_python.$(OBJEXT) richtextlabel_python.$(OBJEXT) \
	imagelabel_python.$(OBJEXT) config_python.$(OBJEXT) \
	misc_python.$(OBJEXT) systray_python.$(OBJEXT) \
	task_python.$(OBJEXT) widget_python.$(OBJEXT) \
	menu_python.$(OBJEXT) karambalistboxitem.$(OBJEXT) \
	graph_python.$(OBJEXT) karambainterface.$(OBJEXT) \
	karambaapp.$(OBJEXT) karamba_python.$(OBJEXT) \
	lineparser.$(OBJEXT) themefile.$(OBJEXT) themesdlg.$(OBJEXT) \
	themewidget.$(OBJEXT) kwidgetlistbox.$(OBJEXT) \
	sknewstuff.$(OBJEXT) themelocale.$(OBJEXT) input.$(OBJEXT) \
	sklineedit.$(OBJEXT) input_python.$(OBJEXT) \
	svcgrp_python.$(OBJEXT) dcopinterface_skel.$(OBJEXT) dcopinterface_stub.$(OBJEXT) themes_layout.$(OBJEXT) themewidget_layout.$(OBJEXT) superkarambasettings.$(OBJEXT)
am__DEPENDENCIES_1 =
superkaramba_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
#>- superkaramba_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
#>- 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
#>- 	$(CXXFLAGS) $(superkaramba_LDFLAGS) $(LDFLAGS) -o $@
#>+ 3
superkaramba_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(KDE_CXXFLAGS) $(superkaramba_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/admin/depcomp
am__depfiles_maybe = depfiles
#>- CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 2
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
#>- 	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 3
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
#>- 	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
#>- 	$(LDFLAGS) -o $@
#>+ 3
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(superkaramba_SOURCES)
DIST_SOURCES = $(superkaramba_SOURCES)
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
shelldesktopDATA_INSTALL = $(INSTALL_DATA)
shellrcDATA_INSTALL = $(INSTALL_DATA)
DATA = $(shelldesktop_DATA) $(shellrc_DATA)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
#>- DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
#>+ 1
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)
ACLOCAL = ${SHELL} /home/guest/botva/src/kdeutils-3.5.10/src-unpacked/admin/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/guest/botva/src/kdeutils-3.5.10/src-unpacked/admin/missing --run tar
AR = ar
ARTSCCONFIG = /usr/bin/artsc-config
AUTOCONF = $(SHELL) $(top_srcdir)/admin/cvs.sh configure || touch configure
AUTODIRS = 
AUTOHEADER = ${SHELL} /home/guest/botva/src/kdeutils-3.5.10/src-unpacked/admin/missing --run autoheader
AUTOMAKE = ${SHELL} /home/guest/botva/src/kdeutils-3.5.10/src-unpacked/admin/missing --run automake-1.10
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -std=iso9899:1990 -W -Wall -Wchar-subscripts -Wshadow -Wpointer-arith -Wmissing-prototypes -Wwrite-strings -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -O2   -Wformat-security -Wmissing-format-attribute
CONF_FILES =  $(top_srcdir)/./admin/configure.in.min $(top_srcdir)/configure.in.in $(top_srcdir)/./ark/configure.in.in $(top_srcdir)/./kcalc/configure.in.bot $(top_srcdir)/./kcalc/configure.in.in $(top_srcdir)/./kcalc/knumber/configure.in.in $(top_srcdir)/./khexedit/configure.in.in $(top_srcdir)/./klaptopdaemon/configure.in.bot $(top_srcdir)/./klaptopdaemon/configure.in.in $(top_srcdir)/./kmilo/configure.in.in $(top_srcdir)/./ksim/configure.in.in $(top_srcdir)/./ksim/monitors/disk/configure.in.in $(top_srcdir)/./ksim/monitors/filesystem/configure.in.in $(top_srcdir)/./ksim/monitors/snmp/configure.in.in $(top_srcdir)/./superkaramba/configure.in.bot $(top_srcdir)/./superkaramba/configure.in.in
CPP = gcc -E
CPPFLAGS =  -DQT_THREAD_SUPPORT  -D_REENTRANT
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wno-long-long -Wundef -ansi -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -Wcast-align -Wchar-subscripts -Wall -W -Wpointer-arith -O2 -Wformat-security -Wmissing-format-attribute -Wno-non-virtual-dtor -fno-exceptions -fno-check-new -fno-common -DQT_CLEAN_NAMESPACE -DQT_NO_ASCII_CAST -DQT_NO_STL -DQT_NO_COMPAT -DQT_NO_TRANSLATION
CYGPATH_W = echo
DCOPIDL = /usr/bin/dcopidl
DCOPIDL2CPP = /usr/bin/dcopidl2cpp
DCOPIDLNG = /usr/bin/dcopidlng
DCOP_DEPENDENCIES = $(DCOPIDL) $(DCOPIDLNG)
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DOXYGEN = /usr/bin/doxygen
DOXYGEN_PROJECT_NAME = KDE Utils API Reference
DOXYGEN_PROJECT_NUMBER = Version 3.5.10
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
ENABLE_PERMISSIVE_FLAG = -fpermissive
EXEEXT = 
F77 = 
FFLAGS = 
FRAMEWORK_COREAUDIO = 
GMSGFMT = /usr/bin/msgfmt
GREP = /usr/bin/grep
HAVE_GCC_VISIBILITY = 0
INSTALL = /usr/bin/ginstall -c -p
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL} $(INSTALL_STRIP_FLAG)
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
KCFG_DEPENDENCIES = $(KCONFIG_COMPILER)
KCONFIG_COMPILER = /usr/bin/kconfig_compiler
KDECONFIG = /usr/bin/kde-config
KDE_CHECK_PLUGIN = $(KDE_PLUGIN) -rpath $(libdir)
KDE_EXTRA_RPATH = 
KDE_HAS_DOXYGEN = yes
KDE_HAVE_DOT = NO
KDE_INCLUDES = 
KDE_LDFLAGS = -L/usr/lib
KDE_MT_LDFLAGS = 
KDE_MT_LIBS = -lpthread
KDE_NO_UNDEFINED = -Wl,--no-undefined -Wl,--allow-shlib-undefined
KDE_PLUGIN = -avoid-version -module -no-undefined $(KDE_NO_UNDEFINED) $(KDE_RPATH) $(KDE_MT_LDFLAGS)
KDE_RPATH = -R $(libdir) -R $(kde_libraries) -R $(qt_libraries) -R $(x_libraries)
KDE_USE_CLOSURE_FALSE = 
KDE_USE_CLOSURE_TRUE = #
KDE_USE_FINAL_FALSE = 
KDE_USE_FINAL_TRUE = #
KDE_USE_FPIE = -fPIE
KDE_USE_NMCHECK_FALSE = 
KDE_USE_NMCHECK_TRUE = #
KDE_USE_PIE = -pie
KDE_XSL_STYLESHEET = /usr/share/apps/ksgmltools2/customization/kde-chunk.xsl
KEYBOARD_LIBS = 
LDFLAGS = 
LDFLAGS_AS_NEEDED = 
LDFLAGS_NEW_DTAGS = 
LIBCOMPAT = 
LIBCRYPT = -lcrypt
LIBDL = -ldl
LIBGMP = -lgmp
LIBJPEG = -ljpeg
LIBKVM = 
LIBOBJS = 
LIBPNG = -lpng -lz -lm
LIBPTHREAD = -lpthread
LIBPYTHON = 
LIBRESOLV = -lresolv
LIBS = -lm -lm -lm 
LIBSM = -lSM -lICE
LIBSNMP = -lnetsnmp
LIBSOCKET = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool --silent
LIBUCB = 
LIBUTIL = -lutil
LIBZ = -lz
LIB_DEVSTAT = 
LIB_KAB = -lkab
LIB_KABC = -lkabc
LIB_KDECORE = -lkdecore
LIB_KDED = 
LIB_KDEPIM = -lkdepim
LIB_KDEPRINT = -lkdeprint
LIB_KDEUI = -lkdeui
LIB_KDNSSD = -lkdnssd
LIB_KFILE = -lkio
LIB_KFM = 
LIB_KHTML = -lkhtml
LIB_KIMPROXY = -lkimproxy
LIB_KIO = -lkio
LIB_KJS = -lkjs
LIB_KNEWSTUFF = -lknewstuff
LIB_KPARTS = -lkparts
LIB_KSPELL = -lkspell
LIB_KSYCOCA = -lkio
LIB_KUNITTEST = -lkunittest
LIB_KUTILS = -lkutils
LIB_POLL = 
LIB_QPE = 
LIB_QT = -lqt-mt  $(LIBZ) $(LIBPNG) -lXext $(LIB_X11) $(LIBSM) -lpthread
LIB_SMB = -lsmb
LIB_X11 = -lX11 $(LIBSOCKET)
LIB_XEXT = -lXext
LIB_XRENDER = 
LIB_XSS = -lXss
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/guest/botva/src/kdeutils-3.5.10/src-unpacked/admin/missing --run makeinfo
MAKEKDEWIDGETS = /usr/bin/makekdewidgets
MCOPIDL = /usr/bin/mcopidl
MEINPROC = /usr/bin/meinproc
MKDIR_P = /usr/bin/mkdir -p
MOC = /usr/lib/qt3/bin/moc
MSGFMT = /usr/bin/msgfmt
MY_LIBKNEWSTUFF = -lknewstuff
NOOPT_CFLAGS = -O0
NOOPT_CXXFLAGS = -O0
OBJEXT = o
PACKAGE = kdeutils
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PKG_CONFIG = /usr/bin/pkg-config
PYTHONINC = 
PYTHONLIB = 
PYTHONMODDIR = no
QTDOCDIR = /usr/lib/qt3/doc/html
QTE_NORTTI = 
QT_INCLUDES = -I/usr/lib/qt3/include
QT_LDFLAGS = -L/usr/lib/qt3/lib
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
TOPSUBDIRS =  ark charselectapplet doc kcalc kcharselect kdelirc kdessh kdf kedit kfloppy kgpg khexedit kjots klaptopdaemon kmilo kregexpeditor ksim ktimer kwallet
UIC = /usr/lib/qt3/bin/uic -L $(kde_widgetdir) -nounload
UIC_TR = tr2i18n
USER_INCLUDES = 
USER_LDFLAGS = 
USE_EXCEPTIONS = -fexceptions
USE_RTTI = 
USE_THREADS = 
VERSION = 3.5.10
WOVERLOADED_VIRTUAL = 
XGETTEXT = /usr/bin/xgettext
XMKMF = 
XMLLINT = /usr/bin/xmllint
XMMS_INCLUDES = -I/usr/include/xmms -I/usr/include/gtk-1.2 -I/usr/include/glib-1.2 -I/usr/lib/glib/include
XMMS_LDFLAGS =  -rdynamic
XMMS_LIBS =  -L/usr/lib -lgtk -lgdk -lgmodule -lglib -ldl -lXext -lX11 -lm -lxmms
X_EXTRA_LIBS = 
X_INCLUDES = -I/usr/X11R7/include
X_LDFLAGS = -L/usr/X11R7/lib
X_PRE_LIBS = 
X_RPATH = -R $(x_libraries)
abs_builddir = /home/guest/botva/src/kdeutils-3.5.10/src-unpacked/superkaramba/src
abs_srcdir = /home/guest/botva/src/kdeutils-3.5.10/src-unpacked/superkaramba/src
abs_top_builddir = /home/guest/botva/src/kdeutils-3.5.10/src-unpacked
abs_top_srcdir = /home/guest/botva/src/kdeutils-3.5.10/src-unpacked
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
all_includes = -I/usr/lib/qt3/include -I/usr/X11R7/include 
all_libraries = -L/usr/lib -L/usr/lib/qt3/lib -L/usr/X11R7/lib   
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/guest/botva/src/kdeutils-3.5.10/src-unpacked/admin/install-sh
kde_appsdir = ${datadir}/applnk
kde_bindir = ${exec_prefix}/bin
kde_confdir = ${datadir}/config
kde_datadir = ${datadir}/apps
kde_htmldir = ${datadir}/doc/HTML
kde_icondir = ${datadir}/icons
kde_includes = /usr/include
kde_kcfgdir = ${datadir}/config.kcfg
kde_libraries = /usr/lib
kde_libs_htmldir = /usr/share/doc/HTML
kde_libs_prefix = /usr
kde_locale = ${datadir}/locale
kde_mimedir = ${datadir}/mimelnk
kde_moduledir = ${libdir}/kde3
kde_qtver = 3
kde_servicesdir = ${datadir}/services
kde_servicetypesdir = ${datadir}/servicetypes
kde_sounddir = ${datadir}/sounds
kde_styledir = ${libdir}/kde3/plugins/styles
kde_templatesdir = ${datadir}/templates
kde_wallpaperdir = ${datadir}/wallpapers
kde_widgetdir = /usr/lib/kde3/plugins/designer
kdeinitdir = $(kde_moduledir)
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /usr/bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr
program_transform_name = s,x,x,
psdir = ${docdir}
qt_includes = /usr/lib/qt3/include
qt_libraries = /usr/lib/qt3/lib
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
top_builddir = ../..
top_srcdir = ../..
x_includes = /usr/X11R7/include
x_libraries = /usr/X11R7/lib
xdg_appsdir = ${datadir}/applications/kde
xdg_directorydir = ${datadir}/desktop-directories
xdg_menudir = ${sysconfdir}/xdg/menus

# set the include path for X, qt and KDE
INCLUDES = $(all_includes) $(XMMS_INCLUDES) $(PYTHONINC)

# these are the headers for your project
noinst_HEADERS = karamba.h karambaapp.h karamba_python.h lineparser.h \
	themefile.h themesdlg.h themewidget.h kwidgetlistbox.h themelocale.h input.h \
	sklineedit.h input_python.h

KDE_OPTIONS = nofinal

# let automoc handle all of the meta source files (moc)
#>- METASOURCES = AUTO

# the application source, library search path, and link libraries
#>- superkaramba_SOURCES = main.cpp karamba.cpp meter.cpp bar.cpp sensor.cpp \
#>- 	datesensor.cpp textlabel.cpp memsensor.cpp uptimesensor.cpp cpusensor.cpp \
#>- 	networksensor.cpp imagelabel.cpp graph.cpp xmmssensor.cpp programsensor.cpp \
#>- 	disksensor.cpp sensorparams.cpp sensorsensor.cpp textfilesensor.cpp clickarea.cpp \
#>- 	noatunsensor.cpp karambarootpixmap.cpp clickmap.cpp rsssensor.cpp textfield.cpp \
#>- 	taskmanager.cpp showdesktop.cpp richtextlabel.cpp karambasessionmanaged.cpp \
#>- 	systemtray.cpp bar_python.cpp meter_python.cpp textlabel_python.cpp \
#>- 	richtextlabel_python.cpp imagelabel_python.cpp config_python.cpp misc_python.cpp \
#>- 	systray_python.cpp task_python.cpp widget_python.cpp menu_python.cpp \
#>- 	karambalistboxitem.cpp graph_python.cpp dcopinterface.skel dcopinterface.stub \
#>- 	karambainterface.cpp karambaapp.cpp karamba_python.cpp lineparser.cpp themefile.cpp \
#>- 	themesdlg.cpp themes_layout.ui themewidget_layout.ui themewidget.cpp \
#>- 	kwidgetlistbox.cpp sknewstuff.h sknewstuff.cpp superkarambasettings.kcfgc themelocale.cpp \
#>- 	input.cpp sklineedit.cpp input_python.cpp svcgrp_python.cpp
#>+ 14
superkaramba_SOURCES=main.cpp karamba.cpp meter.cpp bar.cpp sensor.cpp \
	datesensor.cpp textlabel.cpp memsensor.cpp uptimesensor.cpp cpusensor.cpp \
	networksensor.cpp imagelabel.cpp graph.cpp xmmssensor.cpp programsensor.cpp \
	disksensor.cpp sensorparams.cpp sensorsensor.cpp textfilesensor.cpp clickarea.cpp \
	noatunsensor.cpp karambarootpixmap.cpp clickmap.cpp rsssensor.cpp textfield.cpp \
	taskmanager.cpp showdesktop.cpp richtextlabel.cpp karambasessionmanaged.cpp \
	systemtray.cpp bar_python.cpp meter_python.cpp textlabel_python.cpp \
	richtextlabel_python.cpp imagelabel_python.cpp config_python.cpp misc_python.cpp \
	systray_python.cpp task_python.cpp widget_python.cpp menu_python.cpp \
	karambalistboxitem.cpp graph_python.cpp   \
	karambainterface.cpp karambaapp.cpp karamba_python.cpp lineparser.cpp themefile.cpp \
	themesdlg.cpp   themewidget.cpp \
	kwidgetlistbox.cpp sknewstuff.h sknewstuff.cpp  themelocale.cpp \
	input.cpp sklineedit.cpp input_python.cpp svcgrp_python.cpp dcopinterface_skel.cpp dcopinterface_stub.cpp themes_layout.cpp themewidget_layout.cpp superkarambasettings.cpp


# kde_cfg_DATA = superkaramba.kcfg
superkaramba_LDFLAGS = -Wl,-export-dynamic  $(KDE_RPATH) $(all_libraries) $(PYTHONLIB) $(XMMS_LDFLAGS)
#superkaramba_LDADD = -lkio $(LIB_KDEUI) $(XMMS_LDADD) $(LIBPYTHON) $(LIBKVM) $(MY_LIBKNEWSTUFF)
superkaramba_LDADD = -lkio $(LIB_KDEUI) $(XMMS_LIBS) $(LIBPYTHON) $(LIBKVM) $(MY_LIBKNEWSTUFF)

# this is where the desktop file will go
shelldesktopdir = $(kde_appsdir)/Utilities
shelldesktop_DATA = superkaramba.desktop

# this is where the shell's XML-GUI resource file goes
shellrcdir = $(kde_datadir)/superkaramba
shellrc_DATA = superkarambaui.rc
#>- all: all-am
#>+ 1
all: docs-am  all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
#>- 	@for dep in $?; do \
#>- 	  case '$(am__configure_deps)' in \
#>- 	    *$$dep*) \
#>- 	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
#>- 		&& exit 0; \
#>- 	      exit 1;; \
#>- 	  esac; \
#>- 	done; \
#>- 	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  superkaramba/src/Makefile'; \
#>- 	cd $(top_srcdir) && \
#>- 	  $(AUTOMAKE) --foreign  superkaramba/src/Makefile
#>+ 12
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  superkaramba/src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  superkaramba/src/Makefile
	cd $(top_srcdir) && perl admin/am_edit superkaramba/src/Makefile.in
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
superkaramba$(EXEEXT): $(superkaramba_OBJECTS) $(superkaramba_DEPENDENCIES) 
	@rm -f superkaramba$(EXEEXT)
	$(superkaramba_LINK) $(superkaramba_OBJECTS) $(superkaramba_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/bar.Po
include ./$(DEPDIR)/bar_python.Po
include ./$(DEPDIR)/clickarea.Po
include ./$(DEPDIR)/clickmap.Po
include ./$(DEPDIR)/config_python.Po
include ./$(DEPDIR)/cpusensor.Po
include ./$(DEPDIR)/datesensor.Po
include ./$(DEPDIR)/disksensor.Po
include ./$(DEPDIR)/graph.Po
include ./$(DEPDIR)/graph_python.Po
include ./$(DEPDIR)/imagelabel.Po
include ./$(DEPDIR)/imagelabel_python.Po
include ./$(DEPDIR)/input.Po
include ./$(DEPDIR)/input_python.Po
include ./$(DEPDIR)/karamba.Po
include ./$(DEPDIR)/karamba_python.Po
include ./$(DEPDIR)/karambaapp.Po
include ./$(DEPDIR)/karambainterface.Po
include ./$(DEPDIR)/karambalistboxitem.Po
include ./$(DEPDIR)/karambarootpixmap.Po
include ./$(DEPDIR)/karambasessionmanaged.Po
include ./$(DEPDIR)/kwidgetlistbox.Po
include ./$(DEPDIR)/lineparser.Po
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/memsensor.Po
include ./$(DEPDIR)/menu_python.Po
include ./$(DEPDIR)/meter.Po
include ./$(DEPDIR)/meter_python.Po
include ./$(DEPDIR)/misc_python.Po
include ./$(DEPDIR)/networksensor.Po
include ./$(DEPDIR)/noatunsensor.Po
include ./$(DEPDIR)/programsensor.Po
include ./$(DEPDIR)/richtextlabel.Po
include ./$(DEPDIR)/richtextlabel_python.Po
include ./$(DEPDIR)/rsssensor.Po
include ./$(DEPDIR)/sensor.Po
include ./$(DEPDIR)/sensorparams.Po
include ./$(DEPDIR)/sensorsensor.Po
include ./$(DEPDIR)/showdesktop.Po
include ./$(DEPDIR)/sklineedit.Po
include ./$(DEPDIR)/sknewstuff.Po
include ./$(DEPDIR)/svcgrp_python.Po
include ./$(DEPDIR)/systemtray.Po
include ./$(DEPDIR)/systray_python.Po
include ./$(DEPDIR)/task_python.Po
include ./$(DEPDIR)/taskmanager.Po
include ./$(DEPDIR)/textfield.Po
include ./$(DEPDIR)/textfilesensor.Po
include ./$(DEPDIR)/textlabel.Po
include ./$(DEPDIR)/textlabel_python.Po
include ./$(DEPDIR)/themefile.Po
include ./$(DEPDIR)/themelocale.Po
include ./$(DEPDIR)/themesdlg.Po
include ./$(DEPDIR)/themewidget.Po
include ./$(DEPDIR)/uptimesensor.Po
include ./$(DEPDIR)/widget_python.Po
include ./$(DEPDIR)/xmmssensor.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-shelldesktopDATA: $(shelldesktop_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(shelldesktopdir)" || $(MKDIR_P) "$(DESTDIR)$(shelldesktopdir)"
	@list='$(shelldesktop_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(shelldesktopDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(shelldesktopdir)/$$f'"; \
	  $(shelldesktopDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(shelldesktopdir)/$$f"; \
	done

uninstall-shelldesktopDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(shelldesktop_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(shelldesktopdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(shelldesktopdir)/$$f"; \
	done
install-shellrcDATA: $(shellrc_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(shellrcdir)" || $(MKDIR_P) "$(DESTDIR)$(shellrcdir)"
	@list='$(shellrc_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(shellrcDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(shellrcdir)/$$f'"; \
	  $(shellrcDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(shellrcdir)/$$f"; \
	done

uninstall-shellrcDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(shellrc_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(shellrcdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(shellrcdir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonemtpy = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) $(DATA) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(shelldesktopdir)" "$(DESTDIR)$(shellrcdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#>- clean: clean-am
#>+ 1
clean: kde-rpo-clean  clean-am

#>- clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am
#>+ 1
clean-am: clean-metasources clean-idl clean-ui clean-kcfg clean-bcheck  clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-shelldesktopDATA install-shellrcDATA

install-dvi: install-dvi-am

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-shelldesktopDATA \
	uninstall-shellrcDATA

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-shelldesktopDATA install-shellrcDATA install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-shelldesktopDATA uninstall-shellrcDATA


messages: rc.cpp
	$(EXTRACTRC) *.ui >> rc.cpp
	$(XGETTEXT) *.cpp -o $(podir)/superkaramba.pot
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 7
dcopinterface.kidl: $(srcdir)/dcopinterface.h $(DCOP_DEPENDENCIES)
	$(DCOPIDL) $(srcdir)/dcopinterface.h > dcopinterface.kidl || ( rm -f dcopinterface.kidl ; false )
dcopinterface_skel.cpp: dcopinterface.kidl
	$(DCOPIDL2CPP) --c++-suffix cpp --no-signals --no-stub dcopinterface.kidl
dcopinterface_stub.h: dcopinterface.kidl
	$(DCOPIDL2CPP) --c++-suffix cpp --no-signals --no-skel dcopinterface.kidl

#>+ 3
cpusensor.moc: $(srcdir)/cpusensor.h
	$(MOC) $(srcdir)/cpusensor.h -o cpusensor.moc

#>+ 2
mocs: cpusensor.moc

#>+ 3
input.moc: $(srcdir)/input.h
	$(MOC) $(srcdir)/input.h -o input.moc

#>+ 2
mocs: input.moc

#>+ 3
taskmanager.moc: $(srcdir)/taskmanager.h
	$(MOC) $(srcdir)/taskmanager.h -o taskmanager.moc

#>+ 2
mocs: taskmanager.moc

#>+ 3
sensor.moc: $(srcdir)/sensor.h
	$(MOC) $(srcdir)/sensor.h -o sensor.moc

#>+ 2
mocs: sensor.moc

#>+ 3
datesensor.moc: $(srcdir)/datesensor.h
	$(MOC) $(srcdir)/datesensor.h -o datesensor.moc

#>+ 2
mocs: datesensor.moc

#>+ 3
themesdlg.moc: $(srcdir)/themesdlg.h
	$(MOC) $(srcdir)/themesdlg.h -o themesdlg.moc

#>+ 2
mocs: themesdlg.moc

#>+ 3
programsensor.moc: $(srcdir)/programsensor.h
	$(MOC) $(srcdir)/programsensor.h -o programsensor.moc

#>+ 2
mocs: programsensor.moc

#>+ 3
textlabel.moc: $(srcdir)/textlabel.h
	$(MOC) $(srcdir)/textlabel.h -o textlabel.moc

#>+ 2
mocs: textlabel.moc

#>+ 3
bar.moc: $(srcdir)/bar.h
	$(MOC) $(srcdir)/bar.h -o bar.moc

#>+ 2
mocs: bar.moc

#>+ 3
rsssensor.moc: $(srcdir)/rsssensor.h
	$(MOC) $(srcdir)/rsssensor.h -o rsssensor.moc

#>+ 2
mocs: rsssensor.moc

#>+ 3
themewidget.moc: $(srcdir)/themewidget.h
	$(MOC) $(srcdir)/themewidget.h -o themewidget.moc

#>+ 2
mocs: themewidget.moc

#>+ 3
imagelabel.moc: $(srcdir)/imagelabel.h
	$(MOC) $(srcdir)/imagelabel.h -o imagelabel.moc

#>+ 2
mocs: imagelabel.moc

#>+ 3
karamba.moc: $(srcdir)/karamba.h
	$(MOC) $(srcdir)/karamba.h -o karamba.moc

#>+ 2
mocs: karamba.moc

#>+ 3
richtextlabel.moc: $(srcdir)/richtextlabel.h
	$(MOC) $(srcdir)/richtextlabel.h -o richtextlabel.moc

#>+ 2
mocs: richtextlabel.moc

#>+ 3
sensorsensor.moc: $(srcdir)/sensorsensor.h
	$(MOC) $(srcdir)/sensorsensor.h -o sensorsensor.moc

#>+ 2
mocs: sensorsensor.moc

#>+ 3
clickmap.moc: $(srcdir)/clickmap.h
	$(MOC) $(srcdir)/clickmap.h -o clickmap.moc

#>+ 2
mocs: clickmap.moc

#>+ 3
clickarea.moc: $(srcdir)/clickarea.h
	$(MOC) $(srcdir)/clickarea.h -o clickarea.moc

#>+ 2
mocs: clickarea.moc

#>+ 3
kwidgetlistbox.moc: $(srcdir)/kwidgetlistbox.h
	$(MOC) $(srcdir)/kwidgetlistbox.h -o kwidgetlistbox.moc

#>+ 2
mocs: kwidgetlistbox.moc

#>+ 3
systemtray.moc: $(srcdir)/systemtray.h
	$(MOC) $(srcdir)/systemtray.h -o systemtray.moc

#>+ 2
mocs: systemtray.moc

#>+ 3
disksensor.moc: $(srcdir)/disksensor.h
	$(MOC) $(srcdir)/disksensor.h -o disksensor.moc

#>+ 2
mocs: disksensor.moc

#>+ 3
memsensor.moc: $(srcdir)/memsensor.h
	$(MOC) $(srcdir)/memsensor.h -o memsensor.moc

#>+ 2
mocs: memsensor.moc

#>+ 3
showdesktop.moc: $(srcdir)/showdesktop.h
	$(MOC) $(srcdir)/showdesktop.h -o showdesktop.moc

#>+ 2
mocs: showdesktop.moc

#>+ 3
meter.moc: $(srcdir)/meter.h
	$(MOC) $(srcdir)/meter.h -o meter.moc

#>+ 2
mocs: meter.moc

#>+ 3
xmmssensor.moc: $(srcdir)/xmmssensor.h
	$(MOC) $(srcdir)/xmmssensor.h -o xmmssensor.moc

#>+ 2
mocs: xmmssensor.moc

#>+ 3
networksensor.moc: $(srcdir)/networksensor.h
	$(MOC) $(srcdir)/networksensor.h -o networksensor.moc

#>+ 2
mocs: networksensor.moc

#>+ 3
graph.moc: $(srcdir)/graph.h
	$(MOC) $(srcdir)/graph.h -o graph.moc

#>+ 2
mocs: graph.moc

#>+ 3
karambaapp.moc: $(srcdir)/karambaapp.h
	$(MOC) $(srcdir)/karambaapp.h -o karambaapp.moc

#>+ 2
mocs: karambaapp.moc

#>+ 3
textfilesensor.moc: $(srcdir)/textfilesensor.h
	$(MOC) $(srcdir)/textfilesensor.h -o textfilesensor.moc

#>+ 2
mocs: textfilesensor.moc

#>+ 3
clean-metasources:
	-rm -f  cpusensor.moc input.moc taskmanager.moc sensor.moc datesensor.moc themesdlg.moc programsensor.moc textlabel.moc bar.moc rsssensor.moc themewidget.moc imagelabel.moc karamba.moc richtextlabel.moc sensorsensor.moc clickmap.moc clickarea.moc kwidgetlistbox.moc systemtray.moc disksensor.moc memsensor.moc showdesktop.moc meter.moc xmmssensor.moc networksensor.moc graph.moc karambaapp.moc textfilesensor.moc

#>+ 2
KDE_DIST=themes_layout.ui noatunsensor.h sensor.h meter.h meter_python.h clickmap.h menu_python.h task_python.h richtextlabel_python.h sensorsensor.h karambalistboxitem.h taskmanager.h textlabel.h textlabel_python.h richtextlabel.h karambasessionmanaged.h showdesktop.h superkaramba.kcfg imagelabel.h svcgrp_python.h uptimesensor.h systray_python.h datesensor.h taskbartest.h misc_python.h disksensor.h textfield.h imagelabel_python.h textfilesensor.h clickable.cpp taskbartest.cpp widget_python.h bar.h systemtray.h superkarambasettings.kcfgc rsssensor.h graph.h clickable.h xmmssensor.h dcopinterface.h superkaramba.lsm config_python.h graph_python.h karambainterface.h Makefile.in bar_python.h superkaramba.desktop themewidget_layout.ui sensorparams.h networksensor.h karambarootpixmap.h clickarea.h memsensor.h programsensor.h superkarambaui.rc Makefile.am cpusensor.h 

#>+ 5
clean-idl:
	-rm -f \
	dcopinterface_skel.cpp dcopinterface_skel.h dcopinterface.kidl \
	dcopinterface_stub.cpp dcopinterface_stub.h dcopinterface.kidl 

#>+ 5
clean-ui:
	-rm -f \
	themes_layout.cpp themes_layout.h themes_layout.moc \
	themewidget_layout.cpp themewidget_layout.h themewidget_layout.moc 

#>+ 4
clean-kcfg:
	-rm -f \
	superkarambasettings.cpp superkarambasettings.h 

#>+ 2
docs-am:

#>+ 15
force-reedit:
		@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  superkaramba/src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  superkaramba/src/Makefile
	cd $(top_srcdir) && perl admin/am_edit superkaramba/src/Makefile.in


#>+ 21
clean-bcheck: 
	rm -f *.bchecktest.cc *.bchecktest.cc.class a.out

bcheck: bcheck-am

bcheck-am:
	@for i in ; do \
	    if test $(srcdir)/$$i -nt $$i.bchecktest.cc; then \
	        echo "int main() {return 0;}" > $$i.bchecktest.cc ; \
	        echo "#include \"$$i\"" >> $$i.bchecktest.cc ; \
	        echo "$$i"; \
	        if ! $(CXXCOMPILE)  --dump-class-hierarchy -c $$i.bchecktest.cc; then \
	            rm -f $$i.bchecktest.cc; exit 1; \
	        fi ; \
	        echo "" >> $$i.bchecktest.cc.class; \
	        perl $(top_srcdir)/admin/bcheck.pl $$i.bchecktest.cc.class || { rm -f $$i.bchecktest.cc; exit 1; }; \
	        rm -f a.out; \
	    fi ; \
	done


#>+ 3
final:
	$(MAKE) all-am

#>+ 3
final-install:
	$(MAKE) install-am

#>+ 3
no-final:
	$(MAKE) all-am

#>+ 3
no-final-install:
	$(MAKE) install-am

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 118
disksensor.o: disksensor.moc 
clickarea.lo: clickarea.moc 
graph.lo: graph.moc 
$(srcdir)/showdesktop.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
systemtray.o: systemtray.moc 
$(srcdir)/main.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
bar.o: bar.moc 
$(srcdir)/karambaapp.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/uptimesensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/themesdlg.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
showdesktop.o: showdesktop.moc 
$(srcdir)/misc_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
xmmssensor.lo: xmmssensor.moc 
$(srcdir)/rsssensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
input.lo: input.moc 
$(srcdir)/graph.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/karambainterface.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/karambarootpixmap.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
meter.lo: meter.moc 
$(srcdir)/disksensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
nmcheck-am: nmcheck
$(srcdir)/xmmssensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
dcopinterface_stub.cpp: dcopinterface_stub.h 
disksensor.lo: disksensor.moc 
themesdlg.o: themesdlg.moc 
$(srcdir)/widget_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/bar.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/clickarea.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
cpusensor.o: cpusensor.moc 
textfilesensor.lo: textfilesensor.moc 
$(srcdir)/input.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/kwidgetlistbox.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/textfield.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
textfilesensor.o: textfilesensor.moc 
karambaapp.o: karambaapp.moc 
networksensor.lo: networksensor.moc 
memsensor.o: memsensor.moc 
$(srcdir)/themewidget.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/karamba_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/imagelabel.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/imagelabel_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
networksensor.o: networksensor.moc 
datesensor.lo: datesensor.moc 
$(srcdir)/textfilesensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/textlabel.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
themewidget.o: themewidget.moc 
$(srcdir)/svcgrp_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
taskmanager.lo: taskmanager.moc 
kwidgetlistbox.o: kwidgetlistbox.moc 
$(srcdir)/config_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
clickmap.lo: clickmap.moc 
$(srcdir)/sklineedit.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
sensor.o: sensor.moc 
rsssensor.o: rsssensor.moc 
$(srcdir)/karambalistboxitem.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
systemtray.lo: systemtray.moc 
cpusensor.lo: cpusensor.moc 
imagelabel.lo: imagelabel.moc 
$(srcdir)/textlabel_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/sensorparams.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/networksensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/sensorsensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/programsensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
graph.o: graph.moc 
showdesktop.lo: showdesktop.moc 
$(srcdir)/clickmap.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/richtextlabel.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/sknewstuff.h: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
imagelabel.o: imagelabel.moc 
$(srcdir)/sknewstuff.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
programsensor.o: programsensor.moc 
$(srcdir)/task_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
datesensor.o: datesensor.moc 
clickarea.o: clickarea.moc 
bar.lo: bar.moc 
$(srcdir)/taskmanager.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/sensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/noatunsensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
input.o: input.moc 
memsensor.lo: memsensor.moc 
themesdlg.lo: themesdlg.moc 
xmmssensor.o: xmmssensor.moc 
textlabel.lo: textlabel.moc 
$(srcdir)/meter.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/systray_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
programsensor.lo: programsensor.moc 
rsssensor.lo: rsssensor.moc 
$(srcdir)/bar_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
richtextlabel.lo: richtextlabel.moc 
$(srcdir)/meter_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/input_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/cpusensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
karamba.o: karamba.moc 
$(srcdir)/themelocale.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/lineparser.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/systemtray.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/karamba.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
textlabel.o: textlabel.moc 
meter.o: meter.moc 
$(srcdir)/richtextlabel_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/themefile.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/memsensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
nmcheck: 
karamba.lo: karamba.moc 
richtextlabel.o: richtextlabel.moc 
sensor.lo: sensor.moc 
$(srcdir)/graph_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/karambasessionmanaged.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
$(srcdir)/menu_python.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
clickmap.o: clickmap.moc 
taskmanager.o: taskmanager.moc 
$(srcdir)/datesensor.cpp: dcopinterface_stub.h themes_layout.h themewidget_layout.h superkarambasettings.h 
themewidget.lo: themewidget.moc 
kwidgetlistbox.lo: kwidgetlistbox.moc 
sensorsensor.o: sensorsensor.moc 
karambaapp.lo: karambaapp.moc 
sensorsensor.lo: sensorsensor.moc 

#>+ 36
superkarambasettings.cpp: superkarambasettings.h
superkarambasettings.h: $(srcdir)/superkaramba.kcfg $(srcdir)/superkarambasettings.kcfgc $(KCFG_DEPENDENCIES)
	$(KCONFIG_COMPILER) $(srcdir)/superkaramba.kcfg $(srcdir)/superkarambasettings.kcfgc; ret=$$?; \
	if test "$$ret" != 0; then rm -f superkarambasettings.h ; exit $$ret ;  fi


themewidget_layout.cpp: $(srcdir)/themewidget_layout.ui themewidget_layout.h themewidget_layout.moc
	rm -f themewidget_layout.cpp
	echo '#include <kdialog.h>' > themewidget_layout.cpp
	echo '#include <klocale.h>' >> themewidget_layout.cpp
	$(UIC) -tr ${UIC_TR} -i themewidget_layout.h $(srcdir)/themewidget_layout.ui > themewidget_layout.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" themewidget_layout.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_themewidget_layout,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> themewidget_layout.cpp ;\
	rm -f themewidget_layout.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "themewidget_layout.moc"' >> themewidget_layout.cpp; else rm -f themewidget_layout.cpp ; exit $$ret ; fi

themewidget_layout.h: $(srcdir)/themewidget_layout.ui
	rm -rf themewidget_layout.h;
	$(UIC) $(srcdir)/themewidget_layout.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> themewidget_layout.h ;
themewidget_layout.moc: themewidget_layout.h
	$(MOC) themewidget_layout.h -o themewidget_layout.moc

themes_layout.cpp: $(srcdir)/themes_layout.ui themes_layout.h themes_layout.moc
	rm -f themes_layout.cpp
	echo '#include <kdialog.h>' > themes_layout.cpp
	echo '#include <klocale.h>' >> themes_layout.cpp
	$(UIC) -tr ${UIC_TR} -i themes_layout.h $(srcdir)/themes_layout.ui > themes_layout.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" themes_layout.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_themes_layout,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> themes_layout.cpp ;\
	rm -f themes_layout.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "themes_layout.moc"' >> themes_layout.cpp; else rm -f themes_layout.cpp ; exit $$ret ; fi

themes_layout.h: $(srcdir)/themes_layout.ui
	rm -rf themes_layout.h;
	$(UIC) $(srcdir)/themes_layout.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> themes_layout.h ;
themes_layout.moc: themes_layout.h
	$(MOC) themes_layout.h -o themes_layout.moc
