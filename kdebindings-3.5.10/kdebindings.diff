diff -Naur kdebindings-3.5.10.old/dcoppython/shell/gen_marshal_code.py kdebindings-3.5.10/dcoppython/shell/gen_marshal_code.py
--- kdebindings-3.5.10.old/dcoppython/shell/gen_marshal_code.py	2005-09-10 10:16:13.000000000 +0200
+++ kdebindings-3.5.10/dcoppython/shell/gen_marshal_code.py	2009-09-20 17:45:09.000000000 +0200
@@ -120,12 +120,12 @@
     def __init__(self, type):
         self.type = type
         self.demarshal_as = None
-        self.as = []
+        self.pas = []
         self.info = []
 
-    def add_as(self, as):
-        if self.demarshal_as == None: self.demarshal_as = as
-        self.as += [as]
+    def add_as(self, pas):
+        if self.demarshal_as == None: self.demarshal_as = pas
+        self.pas += [pas]
 
     def add_info(self,info):
         self.info += [info]
@@ -133,7 +133,7 @@
     def xml(self):
         return ['<type dcoptype="%s">' % self.type,
                 '  <demarshal-as>%s</demarshal-as>' % self.demarshal_as] + \
-               ['  <marshal-as>%s</marshal-as>' % as for as in self.as ] + \
+               ['  <marshal-as>%s</marshal-as>' % pas for pas in self.pas ] + \
                ['  <info>%s</info>' % info for info in self.info ] + \
                ['</type>']
 
diff -Naur kdebindings-3.5.10.old/qtruby/rubylib/qtruby/Qt.cpp kdebindings-3.5.10/qtruby/rubylib/qtruby/Qt.cpp
--- kdebindings-3.5.10.old/qtruby/rubylib/qtruby/Qt.cpp	2007-01-15 12:19:09.000000000 +0100
+++ kdebindings-3.5.10/qtruby/rubylib/qtruby/Qt.cpp	2009-09-20 17:59:18.000000000 +0200
@@ -950,7 +950,7 @@
 const char *
 get_VALUEtype(VALUE ruby_value)
 {
-	char * classname = rb_obj_classname(ruby_value);
+	const char * classname = rb_obj_classname(ruby_value);
     const char *r = "";
     if(ruby_value == Qnil)
 	r = "u";
@@ -1395,7 +1395,7 @@
 }
 
 static QCString *
-find_cached_selector(int argc, VALUE * argv, VALUE klass, char * methodName)
+find_cached_selector(int argc, VALUE * argv, VALUE klass, const char * methodName)
 {
     // Look in the cache
 static QCString * mcid = 0;
@@ -1432,7 +1432,7 @@
 static VALUE
 method_missing(int argc, VALUE * argv, VALUE self)
 {
-	char * methodName = rb_id2name(SYM2ID(argv[0]));
+	const char * methodName = rb_id2name(SYM2ID(argv[0]));
     VALUE klass = rb_funcall(self, rb_intern("class"), 0);
 
 	// Look for 'thing?' methods, and try to match isThing() or hasThing() in the Smoke runtime
@@ -1482,7 +1482,7 @@
 
 			VALUE retval = rb_funcall2(qt_internal_module, rb_intern("do_method_missing"), argc+3, temp_stack);
 			if (_current_method == -1) {
-				char * op = rb_id2name(SYM2ID(argv[0]));
+				const char * op = rb_id2name(SYM2ID(argv[0]));
 				if (	qstrcmp(op, "-") == 0
 						|| qstrcmp(op, "+") == 0
 						|| qstrcmp(op, "/") == 0
@@ -1557,7 +1557,7 @@
 class_method_missing(int argc, VALUE * argv, VALUE klass)
 {
 	VALUE result = Qnil;
-	char * methodName = rb_id2name(SYM2ID(argv[0]));
+	const char * methodName = rb_id2name(SYM2ID(argv[0]));
 	VALUE * temp_stack = (VALUE *) calloc(argc+3, sizeof(VALUE));
     temp_stack[0] = rb_str_new2("Qt");
     temp_stack[1] = rb_str_new2(methodName);
@@ -1772,7 +1772,7 @@
 VALUE
 getmetainfo(VALUE self, int &offset, int &index)
 {
-    char * signalname = rb_id2name(rb_frame_last_func());
+    const char * signalname = rb_id2name(rb_frame_last_func());
     VALUE metaObject_value = rb_funcall(qt_internal_module, rb_intern("getMetaObject"), 1, self);
 
     smokeruby_object *ometa = value_obj_info(metaObject_value);
