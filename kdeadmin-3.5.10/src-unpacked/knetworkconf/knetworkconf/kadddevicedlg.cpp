#include <kdialog.h>
#include <klocale.h>
/****************************************************************************
** Form implementation generated from reading ui file './kadddevicedlg.ui'
**
** Created: Вс фев 1 00:56:19 2015
**
** WARNING! All changes made in this file will be lost!
****************************************************************************/

#include "kadddevicedlg.h"

#include <qvariant.h>
#include <qbuttongroup.h>
#include <kcombobox.h>
#include <qradiobutton.h>
#include <qcheckbox.h>
#include <qlabel.h>
#include <klineedit.h>
#include <qlayout.h>
#include <qtooltip.h>
#include <qwhatsthis.h>
#include <qimage.h>
#include <qpixmap.h>

#include "./kadddevicedlg.ui.h"
static const unsigned char img0_kadddevicedlg[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x02,
    0xdc, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xed, 0x95, 0x3f, 0x88, 0x1c,
    0x55, 0x1c, 0xc7, 0x3f, 0x77, 0xf7, 0x94, 0x17, 0x98, 0x84, 0x19, 0x50,
    0x98, 0x07, 0x29, 0x6e, 0x20, 0xca, 0x2d, 0x88, 0xba, 0x7b, 0x09, 0x64,
    0x85, 0x14, 0xb7, 0x10, 0x08, 0x57, 0x99, 0x0b, 0x69, 0xfc, 0x53, 0xb8,
    0xd7, 0xe5, 0xfc, 0x53, 0xd8, 0x19, 0xcb, 0x04, 0xd2, 0x8b, 0xe9, 0x92,
    0x54, 0xbb, 0x60, 0x62, 0x56, 0x8c, 0x70, 0x29, 0x0e, 0x6e, 0xbb, 0x15,
    0x0c, 0xdc, 0xa2, 0x31, 0x79, 0x27, 0x09, 0xcc, 0x6a, 0x16, 0x66, 0xc4,
    0xc1, 0x79, 0xc5, 0xc0, 0xfe, 0x8a, 0x81, 0xb5, 0xb8, 0x8b, 0x4a, 0xd8,
    0xd1, 0xe2, 0xc0, 0xca, 0x5f, 0xf3, 0x78, 0xff, 0x3e, 0x7c, 0xe1, 0xf3,
    0x7e, 0x3c, 0xf8, 0xbf, 0xf6, 0x6b, 0xae, 0x6a, 0xe3, 0xcb, 0x9b, 0x0f,
    0x7e, 0x95, 0x47, 0x32, 0x7d, 0xe7, 0xe2, 0xf2, 0x9b, 0xfa, 0x0c, 0x0f,
    0xfc, 0xf3, 0x80, 0xec, 0x6f, 0xaa, 0xbd, 0x41, 0x03, 0x94, 0xfb, 0xf3,
    0x72, 0x7f, 0xa1, 0x60, 0x3a, 0xfa, 0x88, 0x42, 0x55, 0x81, 0x25, 0x49,
    0x9f, 0x88, 0xa7, 0x97, 0xc3, 0x33, 0xfa, 0x4a, 0xeb, 0x93, 0xf0, 0xe5,
    0xe8, 0x85, 0x80, 0x38, 0x13, 0x8c, 0x17, 0x91, 0x67, 0x10, 0x14, 0x13,
    0xb6, 0x55, 0x1f, 0xe3, 0x41, 0x5e, 0xf8, 0x68, 0xdf, 0x47, 0x9c, 0x90,
    0xe0, 0x04, 0x25, 0x67, 0xe7, 0xab, 0xc0, 0xdd, 0xad, 0xce, 0x9d, 0x90,
    0x08, 0xb4, 0x3e, 0xfc, 0xf1, 0xa9, 0x0d, 0xd3, 0xf2, 0xeb, 0xa6, 0x13,
    0xd7, 0xcc, 0xc6, 0x58, 0x9b, 0x8d, 0xc5, 0x0b, 0x66, 0x72, 0x2f, 0x32,
    0xfa, 0x18, 0x26, 0xf1, 0x30, 0x6f, 0x9f, 0x5c, 0x35, 0xc6, 0x8b, 0x4c,
    0xeb, 0xf8, 0x9a, 0x91, 0x4c, 0x47, 0x94, 0xbc, 0x56, 0x99, 0xb8, 0x7d,
    0xf6, 0x53, 0x35, 0xca, 0x72, 0x34, 0xba, 0x8c, 0x49, 0x89, 0x4c, 0x83,
    0xdb, 0x27, 0x06, 0x04, 0x9e, 0xcf, 0x4e, 0xd9, 0xa3, 0xf1, 0x9e, 0xc1,
    0x95, 0x4d, 0x5a, 0xfe, 0x2a, 0xdc, 0x35, 0x48, 0xd9, 0x21, 0xa9, 0xa7,
    0x04, 0xbe, 0x4f, 0x8a, 0x9b, 0xab, 0x04, 0xbb, 0x32, 0x27, 0x44, 0x23,
    0x08, 0x06, 0x8d, 0x9b, 0x68, 0xdc, 0x31, 0xb0, 0xce, 0x21, 0x4a, 0xb0,
    0x99, 0xa5, 0xee, 0x19, 0xe2, 0x51, 0x42, 0x3e, 0x8a, 0xb1, 0x65, 0x4c,
    0xf3, 0x94, 0x21, 0xcf, 0x04, 0x14, 0xd3, 0x4a, 0x70, 0xe8, 0x19, 0x46,
    0xce, 0x42, 0xa0, 0xf1, 0x1f, 0x25, 0x1c, 0x5a, 0x6c, 0xb2, 0x9d, 0x39,
    0x9a, 0xb2, 0x86, 0x2d, 0x2c, 0x51, 0x18, 0x61, 0xb3, 0x98, 0x95, 0xa3,
    0x6f, 0x30, 0xaa, 0x3b, 0x1a, 0x5e, 0x03, 0x51, 0xb0, 0xe9, 0x6d, 0x42,
    0x09, 0xaa, 0xca, 0xbe, 0x2d, 0x76, 0x9e, 0x07, 0x83, 0x94, 0xb2, 0x10,
    0x8c, 0x53, 0x36, 0xa5, 0x8b, 0x3e, 0x1a, 0x32, 0xbc, 0x95, 0x60, 0x7d,
    0x8b, 0xff, 0x52, 0x93, 0x43, 0xba, 0xcd, 0x30, 0xed, 0x93, 0xf4, 0x27,
    0x58, 0x6d, 0x59, 0xfd, 0x60, 0x15, 0x29, 0xf6, 0x5e, 0x89, 0xaa, 0xb2,
    0xef, 0xbc, 0xeb, 0x87, 0xf3, 0x31, 0xac, 0x47, 0xf5, 0x57, 0xcf, 0xc9,
    0x36, 0xc6, 0x69, 0xf2, 0xb1, 0x26, 0x3a, 0x61, 0x88, 0x5d, 0x82, 0xb6,
    0x3b, 0xb8, 0xdd, 0x75, 0xe4, 0x74, 0x87, 0xc9, 0x2b, 0x20, 0x1a, 0x82,
    0x1f, 0x03, 0xb4, 0xaf, 0x01, 0x16, 0x54, 0x77, 0xab, 0x73, 0xe7, 0xc2,
    0xe9, 0x4b, 0xcb, 0x4f, 0xed, 0xbb, 0xc4, 0xd2, 0xba, 0xe7, 0x88, 0x03,
    0xc8, 0x97, 0xda, 0x5c, 0xbb, 0xd1, 0x7b, 0x8e, 0x77, 0xfb, 0xc4, 0x85,
    0xb0, 0xbe, 0xf4, 0x16, 0x83, 0x71, 0x42, 0xeb, 0xf5, 0x26, 0xd7, 0xee,
    0x77, 0x49, 0x6f, 0x5c, 0xfe, 0x81, 0xaf, 0xb8, 0x8f, 0x62, 0x1e, 0xa0,
    0x47, 0x0f, 0x4a, 0xe6, 0x81, 0x4c, 0x1d, 0xc8, 0x7e, 0xe6, 0xbe, 0x23,
    0xe3, 0xc3, 0xbf, 0x5a, 0x06, 0xd8, 0x6b, 0xba, 0xa9, 0x3a, 0xa0, 0xfd,
    0x9f, 0x29, 0x99, 0xcc, 0x92, 0xaf, 0x0e, 0x68, 0xff, 0x97, 0xa7, 0x09,
    0x9f, 0x05, 0xcf, 0xa7, 0x45, 0x42, 0x48, 0x88, 0x88, 0x60, 0xc6, 0x8e,
    0xc1, 0xe3, 0x2e, 0xbe, 0xb7, 0x88, 0xfd, 0x26, 0xc7, 0x0e, 0x2d, 0x76,
    0x14, 0x82, 0xb4, 0x19, 0x8e, 0x86, 0x3c, 0xec, 0x3f, 0xa4, 0xb3, 0x75,
    0x9b, 0x89, 0x9e, 0xfc, 0x69, 0x7f, 0x16, 0xf4, 0x6f, 0x89, 0x73, 0xb4,
    0x86, 0xed, 0xa5, 0x08, 0xe3, 0xd5, 0x88, 0xb3, 0x01, 0xad, 0xf3, 0x35,
    0x7a, 0xbb, 0x97, 0xa9, 0x8f, 0xdb, 0x0c, 0x9f, 0xa4, 0xb8, 0xda, 0x6c,
    0xfb, 0x55, 0x7d, 0xa0, 0xf6, 0x12, 0x6b, 0x28, 0x58, 0x38, 0x67, 0x42,
    0xc8, 0x63, 0x5a, 0x51, 0x03, 0x7e, 0xfb, 0x96, 0xc1, 0xca, 0x45, 0x2e,
    0xdd, 0xfa, 0x9c, 0xab, 0x9f, 0xf5, 0xef, 0x02, 0xbf, 0xcf, 0xb2, 0x5f,
    0x09, 0x8e, 0x5e, 0xac, 0x69, 0xeb, 0x86, 0x48, 0x42, 0xb1, 0x7e, 0xf5,
    0x7a, 0x51, 0x53, 0xa8, 0xb8, 0xd0, 0xd3, 0x48, 0xfb, 0xa4, 0x0a, 0x06,
    0x63, 0x0b, 0x8f, 0xb9, 0x09, 0x7c, 0x31, 0xcb, 0x7e, 0x15, 0x78, 0xae,
    0x79, 0x72, 0x6d, 0xc5, 0x39, 0x79, 0xdf, 0xee, 0x6e, 0x7e, 0x0d, 0xa4,
    0xc0, 0x91, 0x67, 0x2e, 0x2c, 0x00, 0x3f, 0x01, 0xdf, 0x57, 0x41, 0xfe,
    0xa9, 0x8e, 0x00, 0xc1, 0xbf, 0x9c, 0xa9, 0xfc, 0x14, 0xfe, 0xd3, 0xfa,
    0x03, 0xe7, 0x50, 0x97, 0x59, 0x94, 0x78, 0xd7, 0x4a, 0x00, 0x00, 0x00,
    0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};


/*
 *  Constructs a KAddDeviceDlg as a child of 'parent', with the
 *  name 'name' and widget flags set to 'f'.
 */
KAddDeviceDlg::KAddDeviceDlg( QWidget* parent, const char* name, WFlags fl )
    : QWidget( parent, name, fl )
{
    QImage img;
    img.loadFromData( img0_kadddevicedlg, sizeof( img0_kadddevicedlg ), "PNG" );
    image0 = img;
    if ( !name )
	setName( "KAddDeviceDlg" );
    setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)5, (QSizePolicy::SizeType)5, 0, 0, sizePolicy().hasHeightForWidth() ) );
    setMinimumSize( QSize( 0, 0 ) );
    setMaximumSize( QSize( 32767, 32767 ) );
    setSizeIncrement( QSize( 0, 0 ) );
    setIcon( image0 );
    KAddDeviceDlgLayout = new QHBoxLayout( this, 0, 6, "KAddDeviceDlgLayout"); 

    gbBasicDeviceInfo = new QButtonGroup( this, "gbBasicDeviceInfo" );
    gbBasicDeviceInfo->setEnabled( TRUE );
    gbBasicDeviceInfo->setColumnLayout(0, Qt::Vertical );
    gbBasicDeviceInfo->layout()->setSpacing( 6 );
    gbBasicDeviceInfo->layout()->setMargin( 11 );
    gbBasicDeviceInfoLayout = new QGridLayout( gbBasicDeviceInfo->layout() );
    gbBasicDeviceInfoLayout->setAlignment( Qt::AlignTop );
    Spacer4 = new QSpacerItem( 130, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    gbBasicDeviceInfoLayout->addMultiCell( Spacer4, 1, 1, 2, 4 );

    kcbAutoBootProto = new KComboBox( FALSE, gbBasicDeviceInfo, "kcbAutoBootProto" );

    gbBasicDeviceInfoLayout->addWidget( kcbAutoBootProto, 0, 3 );
    spacer5 = new QSpacerItem( 50, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    gbBasicDeviceInfoLayout->addItem( spacer5, 0, 4 );

    rbBootProtoManual = new QRadioButton( gbBasicDeviceInfo, "rbBootProtoManual" );

    gbBasicDeviceInfoLayout->addMultiCellWidget( rbBootProtoManual, 1, 1, 0, 1 );

    rbBootProtoAuto = new QRadioButton( gbBasicDeviceInfo, "rbBootProtoAuto" );

    gbBasicDeviceInfoLayout->addMultiCellWidget( rbBootProtoAuto, 0, 0, 0, 1 );
    spacer9 = new QSpacerItem( 16, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    gbBasicDeviceInfoLayout->addItem( spacer9, 0, 2 );

    kcbstartAtBoot = new QCheckBox( gbBasicDeviceInfo, "kcbstartAtBoot" );
    kcbstartAtBoot->setEnabled( TRUE );

    gbBasicDeviceInfoLayout->addMultiCellWidget( kcbstartAtBoot, 4, 4, 0, 4 );

    kcbNetmask = new KComboBox( FALSE, gbBasicDeviceInfo, "kcbNetmask" );
    kcbNetmask->setEditable( FALSE );

    gbBasicDeviceInfoLayout->addMultiCellWidget( kcbNetmask, 3, 3, 3, 4 );
    spacer11_2 = new QSpacerItem( 16, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    gbBasicDeviceInfoLayout->addItem( spacer11_2, 3, 0 );
    spacer11 = new QSpacerItem( 16, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    gbBasicDeviceInfoLayout->addItem( spacer11, 3, 2 );

    TextLabel1_2 = new QLabel( gbBasicDeviceInfo, "TextLabel1_2" );

    gbBasicDeviceInfoLayout->addWidget( TextLabel1_2, 3, 1 );

    kleIPAddress = new KLineEdit( gbBasicDeviceInfo, "kleIPAddress" );

    gbBasicDeviceInfoLayout->addMultiCellWidget( kleIPAddress, 2, 2, 3, 4 );
    spacer10 = new QSpacerItem( 16, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    gbBasicDeviceInfoLayout->addItem( spacer10, 2, 2 );

    TextLabel1 = new QLabel( gbBasicDeviceInfo, "TextLabel1" );

    gbBasicDeviceInfoLayout->addWidget( TextLabel1, 2, 1 );
    spacer10_2 = new QSpacerItem( 16, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    gbBasicDeviceInfoLayout->addItem( spacer10_2, 2, 0 );
    KAddDeviceDlgLayout->addWidget( gbBasicDeviceInfo );
    languageChange();
    resize( QSize(299, 167).expandedTo(minimumSizeHint()) );
    clearWState( WState_Polished );

    // signals and slots connections
    connect( rbBootProtoManual, SIGNAL( toggled(bool) ), kcbAutoBootProto, SLOT( setDisabled(bool) ) );
    connect( rbBootProtoAuto, SIGNAL( toggled(bool) ), kleIPAddress, SLOT( setDisabled(bool) ) );
    connect( rbBootProtoAuto, SIGNAL( toggled(bool) ), kcbNetmask, SLOT( setDisabled(bool) ) );

    // tab order
    setTabOrder( rbBootProtoAuto, kcbAutoBootProto );
    setTabOrder( kcbAutoBootProto, rbBootProtoManual );
    setTabOrder( rbBootProtoManual, kleIPAddress );
    setTabOrder( kleIPAddress, kcbNetmask );
    setTabOrder( kcbNetmask, kcbstartAtBoot );
    init();
}

/*
 *  Destroys the object and frees any allocated resources
 */
KAddDeviceDlg::~KAddDeviceDlg()
{
    // no need to delete child widgets, Qt does it all for us
}

/*
 *  Sets the strings of the subwidgets using the current
 *  language.
 */
void KAddDeviceDlg::languageChange()
{
    setCaption( tr2i18n( "Configure Interface" ) );
    gbBasicDeviceInfo->setTitle( tr2i18n( "TCP/IP Address" ) );
    QToolTip::add( gbBasicDeviceInfo, QString::null );
    kcbAutoBootProto->clear();
    kcbAutoBootProto->insertItem( tr2i18n( "dhcp" ) );
    kcbAutoBootProto->insertItem( tr2i18n( "bootp" ) );
    QToolTip::add( kcbAutoBootProto, tr2i18n( "The boot protocol this network device should use" ) );
    QWhatsThis::add( kcbAutoBootProto, tr2i18n( "The boot protocol this network device should use" ) );
    rbBootProtoManual->setText( tr2i18n( "Manual:" ) );
    QToolTip::add( rbBootProtoManual, tr2i18n( "Use a static IP address. Use the fields below to enter the values" ) );
    QWhatsThis::add( rbBootProtoManual, tr2i18n( "<p>Sets this interface to use static IP settings.</p>\n"
"<p>In this case, please use the fields below to enter the desired values manually.</p>" ) );
    rbBootProtoAuto->setText( tr2i18n( "Automatic:" ) );
    QToolTip::add( rbBootProtoAuto, tr2i18n( "Use a dynamic IP address" ) );
    QWhatsThis::add( rbBootProtoAuto, tr2i18n( "<p>Using an dynamic IP address causes this device to get a free IP address automatically.</p>\n"
"<p>The interface will try to contact an DHCP- or BOOTP-Server during the boot process.</p>\n"
"<p>Rendevouz is not supported yet.</p>" ) );
    kcbstartAtBoot->setText( tr2i18n( "Activate when the computer starts" ) );
    QToolTip::add( kcbstartAtBoot, tr2i18n( "Ensures that this interface gets activated during boot time" ) );
    QWhatsThis::add( kcbstartAtBoot, tr2i18n( "<p>Ensures that this interface gets activated during boot time.</p>\n"
"<p>Otherwise, you will have to active the interface manually after you have logged in after the boot process.</p>" ) );
    kcbNetmask->clear();
    kcbNetmask->insertItem( tr2i18n( "255.255.255.0" ) );
    kcbNetmask->insertItem( tr2i18n( "255.255.0.0" ) );
    kcbNetmask->insertItem( tr2i18n( "255.0.0.0" ) );
    kcbNetmask->insertItem( tr2i18n( "255.255.255.128" ) );
    kcbNetmask->insertItem( tr2i18n( "255.255.255.192" ) );
    kcbNetmask->insertItem( tr2i18n( "255.255.255.240" ) );
    kcbNetmask->insertItem( tr2i18n( "255.255.255.248" ) );
    QToolTip::add( kcbNetmask, tr2i18n( "Subnetmask of the network device" ) );
    QWhatsThis::add( kcbNetmask, tr2i18n( "<p>Please enter the desired subnetmask for the interface here.</p>\n"
"<p>For small private networks, 255.255.255.0 will most often be a reasonable default value.</p>\n"
"<p>This field will change from a popup box to a combo box as soon as you enable the advanced settings below.</p>" ) );
    TextLabel1_2->setText( tr2i18n( "Netmask:" ) );
    QToolTip::add( TextLabel1_2, tr2i18n( "The netmask defines a range of IP numbers which will build a subnet inside the network." ) );
    QWhatsThis::add( TextLabel1_2, tr2i18n( "The netmask defines a range of IP numbers which will build a subnet inside the network." ) );
    kleIPAddress->setText( QString::null );
    QToolTip::add( kleIPAddress, tr2i18n( "IP address for the network device" ) );
    QWhatsThis::add( kleIPAddress, tr2i18n( "<p>Here you should enter the IP address for the network interface.</p>\n"
"<p>Please note: If your network is connected to the internet, you should only enter IP addresses you have been given by your provider.</p>\n"
"<p>Otherwise, you should enter one of the IP addresses which are explicitly reserved for private use.</p>\n"
"<p>Most small private networks use class C networks, which allow up to 255 computers in your network. So simply use addresses like 192.168.1.1, 192.168.1.2, 192.168.1.171 and so on for your computers.</p>\n"
"<p>Cass C networks: 192.168.0.0 to 192.168.255.25, for example 192.168.0.13.</p>\n"
"<p>Class B networks: 172.16.0.0 to 172.31.255.255, for example 172.28.2.5</p>\n"
"<p>Class A networks: 10.0.0.0 to 10.255.255.255, for example 10.5.12.14</p>\n"
"<p>Please ensure that all IP addresses you give to your computers are unique; you will have many problems if the same address is assigned to more than one network device.</p>" ) );
    TextLabel1->setText( tr2i18n( "IP address:" ) );
    QToolTip::add( TextLabel1, tr2i18n( "An IP address is an unique identifier of a networking device in an TCP/IP network" ) );
    QWhatsThis::add( TextLabel1, tr2i18n( "An IP address is an unique identifier of a networking device in an TCP/IP network" ) );
}

#include "kadddevicedlg.moc"
